// GraphQL 
// Types -- structure of game

// Queries -- fetching data

// Mutations -- changing data

// Subscriptions -- subscribe to realtime events





type Player {
    id: ID!
    name: String!
}

type Action {
    playerID: ID!
    nhlPlayerID: ID!
    timestamp: AWSDateTime!
}

type Game {
    id: ID!
    players: [Player!]!
    currentPlayerID: ID!
    gameStatus: String! // # e.g., "IN_PROGRESS", "FINISHED"
    activeNHLPlayer: ID!
    moves: [Action!]!
}


type Query {
    getGame(id: ID!): Game
    listActiveGames: [Game!]!
}

type Mutation {
    startGame(playerIDs: [ID!]!): Game
    joinGame(gameID: ID!, playerID: ID!): Game
    makeMove(action: Action!): Game
}

type Subscription {
    onGameStateUpdated(gameID: ID!): Game
        @aws_subscribe(mutations: ["makeMove", "startGame", "joinGame"])
    onPlayerJoined(gameID: ID!): Game
        @aws_subscribe(mutations: ["joinGame"])
}


/*
    Resolvers.  
        Needs more explanation.
        Can they do the game logic?
        Can they send back failed moves?


    DynamoDB Tables 
        Can I have them expire? Or set an expiration on them when gameStatus == "FINISHED"
*/


/* 
    Things needed for site:

    Google Ads set up.  

    Face Off.


*/


type Action {
	playerID: ID!
	guessID: ID!
	timestamp: AWSDateTime!
}

type Game {
	id: ID!
	players: [Player!]!
	currentPlayerID: ID!
	gameStatus: String!
	actions: [Action!]!
}

type Queue {
    players: [Player!]!
}

type Player {
	id: ID!
	name: String!
}

type Mutation {
    lookForGame(player: Player!): Boolean
	startGame(playerIDs: [ID!]!): Game
	joinGame(gameID: ID!, playerID: ID!): Game
	takeAction(gameID: ID!, playerID: ID!, guessID: ID!): Game
}

type Query {
	getGame(id: ID!): Game
	listActiveGames: [Game!]!
	playersLookingForGame: [Player!]!
}

type Subscription {
	onGameStateUpdated(gameID: ID!): Game
		@aws_subscribe(mutations: ["takeAction","startGame","joinGame"])
	onPlayerJoined(gameID: ID!): Game
		@aws_subscribe(mutations: ["joinGame"])
}




Player will Queue
> lookForGame
    > Add player into Queue
    > Lambda Function to Check for players in queue [If 2 unqueued players, pair]
        > StarGame
        > DeQueue playerIDS







        /**
 * Query Resolver for getGame
 * Fetches a specific game by its ID.
 */
export function request(ctx) {
  return {
    operation: 'GetItem',
    key: {
      id: ctx.args.id,
    },
  };
}

export function response(ctx) {
  return ctx.result.item;
}






/**
 * Query Resolver for listActiveGames
 * Fetches a list of games with a status indicating they are active.
 * (Assumes a 'gameStatus' attribute in your Game data source)
 */
export function request(ctx) {
  return {
    operation: 'Scan', // Or Query if you have an appropriate index
    filter: {
      expression: 'gameStatus = :active',
      expressionValues: {
        ':active': 'ACTIVE', // Adjust based on your status values
      },
    },
  };
}

export function response(ctx) {
  return ctx.result.items;
}